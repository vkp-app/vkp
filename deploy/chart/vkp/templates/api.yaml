apiVersion: v1
kind: ConfigMap
metadata:
  name: apiserver-config
data:
  prometheus.yaml: |
    # nothing to see here
    metrics: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiserver
  labels:
    app.kubernetes.io/name: vkp
    app.kubernetes.io/component: apiserver
    app.kubernetes.io/instance: vkp
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vkp
      app.kubernetes.io/component: apiserver
      app.kubernetes.io/instance: vkp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vkp
        app.kubernetes.io/component: apiserver
        app.kubernetes.io/instance: vkp
      annotations:
        kubectl.kubernetes.io/default-container: apiserver
    spec:
      serviceAccountName: apiserver
      volumes:
        - name: tls
          secret:
            secretName: {{ .Values.global.ingress.tlsSecret }}
        - name: config
          configMap:
            name: apiserver-config
      containers:
        - name: apiserver
          image: {{ .Values.api.image }}
          args:
            - --v={{ .Values.api.logLevel }}
            - --prometheus-url={{ .Values.prometheus.url }}
            - --prometheus-config-file=/etc/vkp/config/prometheus.yaml
            - --dex-url=https://dex.{{ .Values.global.ingress.domain }}
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          volumeMounts:
            - mountPath: /var/run/secrets/paas.dcas.dev/tls
              name: tls
              readOnly: true
            - name: config
              mountPath: /etc/vkp/config
              readOnly: true
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 12848
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /livez
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 15
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        - name: oauth-proxy
          image: {{ .Values.oauthProxy.image }}
          args:
            - --http-address=:8079
            - --provider=oidc
            - --client-id=vkp
            - --client-secret=password
            - --email-domain=*
            - --oidc-issuer-url=https://dex.{{ .Values.global.ingress.domain }}
            - --redirect-url=https://vkp.{{ .Values.global.ingress.domain }}/oauth2/callback
            - --prefer-email-to-user=true
            - --cookie-secure=true
            - --cookie-secret=NTk4YzE3ZmZhZGRhYTZjMDY4MzA2OTY2Yzg4Yzg3MGI=
            - --cookie-refresh=2h
            - --code-challenge-method=S256
            - --upstream=http://localhost:8080
            - --scope=openid profile email groups
          env:
            - name: SSL_CERT_FILE
              value: /var/run/secrets/paas.dcas.dev/tls/ca.crt
          ports:
            - containerPort: 8079
              name: web
              protocol: TCP
          volumeMounts:
            - mountPath: /var/run/secrets/paas.dcas.dev/tls
              name: tls
              readOnly: true
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: apiserver
  labels:
    app.kubernetes.io/name: vkp
    app.kubernetes.io/component: apiserver
    app.kubernetes.io/instance: vkp
spec:
  ingressClassName: {{ .Values.global.ingress.ingressClassName }}
  tls:
    - hosts:
        - vkp.{{ .Values.global.ingress.domain }}
      secretName: {{ .Values.global.ingress.tlsSecret }}
  rules:
    - host: vkp.{{ .Values.global.ingress.domain }}
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: apiserver
                port:
                  name: web
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: apiserver-role
rules:
  - apiGroups:
      - paas.dcas.dev
    resources:
      - clusters
    verbs:
      - get
      - list
      - watch
      - create
      - delete
      - update
  - apiGroups:
      - paas.dcas.dev
    resources:
      - clusteraddonbindings
      - clusteraddonbindings/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
      - deletecollection
  - apiGroups:
      - paas.dcas.dev
    resources:
      - clusteraddons
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - paas.dcas.dev
    resources:
      - tenants
      - tenants/status
    verbs:
      - get
      - list
      - watch
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: apiserver-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: apiserver-role
subjects:
  - kind: ServiceAccount
    name: apiserver
    namespace: {{ .Release.Namespace }}
---
kind: Service
apiVersion: v1
metadata:
  name: apiserver
  labels:
    app.kubernetes.io/name: vkp
    app.kubernetes.io/component: apiserver
    app.kubernetes.io/instance: vkp
spec:
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 80
      targetPort: web
  selector:
    app.kubernetes.io/name: vkp
    app.kubernetes.io/component: apiserver
    app.kubernetes.io/instance: vkp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: apiserver
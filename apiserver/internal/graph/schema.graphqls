directive @hasUser on FIELD_DEFINITION
directive @hasAdmin on FIELD_DEFINITION

enum Track {
  STABLE,
  REGULAR,
  RAPID,
  BETA
}

enum TenantPhase {
  PendingApproval
  Ready
}

type Tenant {
  name: ID!
  owner: String!
  observedClusters: [NamespacedName!]!

  status: TenantStatus!
}

type TenantStatus {
  phase: TenantPhase!
}

type NamespacedName {
  name: String!
  namespace: String!
}

type Cluster {
  name: ID!
  tenant: ID!
  track: Track!
  addons: [NamespacedName!]!

  status: ClusterStatus!
}

type ClusterStatus {
  kubeVersion: String!
  kubeURL: String!
  webURL: String!
}

type ClusterAddon {
  name: String!
  displayName: String!
  description: String!
  maintainer: String!
  logo: String!
  source: AddonSource!
}

enum AddonSource {
  Official,
  Platform,
  Community,
  Unknown
}

type User {
  username: String!
  groups: [String!]!
}

type MetricValue {
  time: Int!
  value: String!
}

type Query {
  tenants: [Tenant!]! @hasUser
  tenant(tenant: ID!): Tenant! @hasUser

  clustersInTenant(tenant: ID!): [Cluster!]! @hasUser
  cluster(tenant: ID!, cluster: ID!): Cluster! @hasUser
  clusterAddons(tenant: ID!): [ClusterAddon!]! @hasUser

  currentUser: User! @hasUser

  clusterMetricMemory(tenant: ID!, cluster: ID!): [MetricValue!]! @hasUser
  clusterMetricCPU(tenant: ID!, cluster: ID!): [MetricValue!]! @hasUser
  clusterMetricPods(tenant: ID!, cluster: ID!): [MetricValue!]! @hasUser
  clusterMetricNetReceive(tenant: ID!, cluster: ID!): [MetricValue!]! @hasUser
  clusterMetricNetTransmit(tenant: ID!, cluster: ID!): [MetricValue!]! @hasUser

  renderKubeconfig(tenant: ID!, cluster: ID!): String! @hasUser
}

input NewCluster {
  name: String!
  track: Track!
}

type Mutation {
  createTenant(tenant: String!): Tenant! @hasUser
  createCluster(tenant: ID!, input: NewCluster!): Cluster! @hasUser

  approveTenant(tenant: ID!): Boolean! @hasAdmin
}

directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @hasClusterAccess(write: Boolean!) on ARGUMENT_DEFINITION
directive @hasTenantAccess(write: Boolean!) on ARGUMENT_DEFINITION

enum Role {
  ADMIN,
  USER
}

enum AddonPhase {
  Installing,
  Installed,
  Deleting
}

enum Track {
  STABLE,
  REGULAR,
  RAPID,
  BETA
}

enum TenantPhase {
  PendingApproval
  Ready
}

type Tenant {
  name: ID!
  owner: String!
  observedClusters: [NamespacedName!]!

  status: TenantStatus!
}

type TenantStatus {
  phase: TenantPhase!
}

type NamespacedName {
  name: String!
  namespace: String!
}

type Cluster {
  name: ID!
  tenant: ID!
  track: Track!

  status: ClusterStatus!
}

type ClusterStatus {
  kubeVersion: String!
  kubeURL: String!
  webURL: String!
}

type ClusterAddon {
  name: String!
  displayName: String!
  description: String!
  maintainer: String!
  logo: String!
  source: AddonSource!
  sourceURL: String!
}

enum AddonSource {
  Official,
  Platform,
  Community,
  Unknown
}

type AddonBindingStatus {
  name: String!
  phase: AddonPhase!
}

type User {
  username: String!
  groups: [String!]!
}

enum MetricFormat {
  Bytes,
  CPU,
  Time,
  Plain
}

type MetricValue {
  time: Int!
  value: String!
}

type Metric {
  name: String!
  metric: String!
  format: MetricFormat!
  values: [MetricValue!]!
}

type Query {
  tenants: [Tenant!]! @hasRole(role: USER)
  tenant(tenant: ID! @hasTenantAccess(write: false)): Tenant! @hasRole(role: USER)

  clustersInTenant(tenant: ID! @hasTenantAccess(write: false)): [Cluster!]! @hasRole(role: USER)
  cluster(tenant: ID!, cluster: ID! @hasClusterAccess(write: false)): Cluster! @hasRole(role: USER)

  clusterAddons(tenant: ID! @hasTenantAccess(write: false)): [ClusterAddon!]! @hasRole(role: USER)
  clusterInstalledAddons(tenant: ID!, cluster: ID! @hasClusterAccess(write: false)): [AddonBindingStatus!]! @hasRole(role: USER)

  currentUser: User! @hasRole(role: USER)

  clusterMetrics(tenant: ID!, cluster: ID! @hasClusterAccess(write: false)): [Metric!]! @hasRole(role: USER)

  renderKubeconfig(tenant: ID!, cluster: ID! @hasClusterAccess(write: false)): String! @hasRole(role: USER)
}

input NewCluster {
  name: String!
  track: Track!
}

type Mutation {
  createTenant(tenant: String!): Tenant! @hasRole(role: USER)
  createCluster(tenant: ID!, input: NewCluster! @hasTenantAccess(write: true)): Cluster! @hasRole(role: USER)

  installAddon(tenant: ID!, cluster: ID!, addon: String! @hasClusterAccess(write: true)): Boolean! @hasRole(role: USER)
  uninstallAddon(tenant: ID!, cluster: ID!, addon: String! @hasClusterAccess(write: true)): Boolean! @hasRole(role: USER)

  approveTenant(tenant: ID!): Boolean! @hasRole(role: ADMIN)
}
